#!/usr/bin/env node

'use strict';
/**
 * Module dependencies.
 */
    var debug = require('debug')('departureTime:server');
    var http = require('http');
    //var MongoClient = require('mongodb').MongoClient;
    var logger = require('../lib/logger');
    var server;
require('../app').initialize(function(err, app) {

    //var insertStops = require('../lib/insertStops');
    //var url = 'mongodb://localhost:27017/departureTimesTest';

    /**
     * Get port from environment and store in Express.
     */

    var port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */



    // require('../lib/mongoUtils.js').connectToServer(function(err){
    //   if (err) {
    //     throw err;
    //   }

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    // });
});




// MongoClient.connect(url, function(err, db) {
//     if (err) {
//         logger.error(err);
//         throw err;
//     }
//     db.collection('stops').count({}, function(err, res) {
//       logger.info(res);
//     });
//     // insertStops(db, function(err) {
//     //     //ready to serve everything;
//     //     if (err) {
//     //         logger.error(err);
//     //         db.close();
//     //         process.exit(1);
//     //     }
//     //     logger.info('All the stop data was inserted correctly.');
//     // });
// });



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}